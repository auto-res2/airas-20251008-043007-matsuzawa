
Input:
You are a cutting-edge AI researcher. Based on the new method described in # New Methods and the experimental policy outlined in # Experiment Strategy, please generate 3 distinct Experiment objects.

# Instructions
- Generate 3 major experimental lines (Experiment objects) based on the experimental strategy.
- Each Experiment (identified by experiment_id) represents a different experimental perspective or validation angle.
- Within each Experiment, run_variations are the variations that will be compared against each other (e.g., ["baseline", "proposed"], ["full-method", "ablation-A", "ablation-B"]).
- Keep run_variations to 3-5 variations per experiment (including baseline and proposed method) to ensure reasonable execution time and resource usage.
- Each Experiment should:
    - Have a unique experiment_id (e.g., "exp-1", "exp-2", "exp-3")
    - Have a clear description of its objective or hypothesis
    - Have a list of run_variations that will be compared within this experiment
    - Cover different aspects of validating the proposed method
- The experiments should be complementary and cover various validation angles such as:
    - Main performance validation
    - Ablation studies
    - Robustness tests
    - Comparison with baselines
    - Hyperparameter sensitivity analysis
    - Computational efficiency analysis
- Each experiment will have its own GitHub branch and code.
- The run_variations within each experiment define different configurations or conditions to test (e.g., different hyperparameters, different baselines, different datasets).

- Design the details of each experiment assuming the execution environment specified in "Experimental Environment."
- The experimental details should include the following for each experiment:
    - Machine learning / deep learning models to be used
        - If necessary, also include baseline models.
    - Datasets
    - Dataset preprocessing methods
    - Data splitting method (train/val/test, cross-validation)
    - Number of repetitions (number of seeds), averaging method, and selection criteria (best-val, last, early stopping)
    - Evaluation metrics
        - Primary and secondary metrics
        - Examples: Accuracy / F1 / AUROC (classification), RMSE / MAE (regression), mAP (detection), mIoU (segmentation), BLEU / ROUGE / METEOR (generation), NDCG / MRR (ranking), ECE / Brier Score (calibration)
    - Comparisons
        - Prior methods (strong baselines, SOTA, simple baselines), etc.
        - If there are implementation or configuration differences, note the adjustments in footnotes.
    - Methods for analyzing important hyperparameters (e.g., learning rate, temperature, k, thresholds)
    - Methods for assessing robustness
        - Resistance to noise injection, distribution shift (OOD), adversarial perturbations, and domain transfer
    - Computation of FLOPs, training/inference time, memory usage, and cost / wall-clock time
    - Example experimental code
- Avoid excessive redundancy across experiments. When a single experiment can cover multiple validation items, integrate them appropriately.
- NO-FALLBACK CONSTRAINT: Never suggest using synthetic/dummy/placeholder data.
- Also provide:
    - expected_models: A list of specific model names/architectures that will be used across all experiments (e.g., ["ResNet-50", "BERT-base", "GPT-3.5-turbo"])
    - expected_datasets: A list of specific dataset names that will be used across all experiments (e.g., ["CIFAR-10", "ImageNet", "IMDB Reviews"])

## Output Format
Please provide:
- experiments: A list of 3 Experiment objects, each with:
    - experiment_id: Unique identifier
    - run_variations: List of variation names/identifiers for this experiment
    - description: Detailed description including all aspects mentioned in the instructions
- expected_models: List of model names/architectures
- expected_datasets: List of dataset names

# Experimental Environment
NVIDIA A100
VRAM：80GB
RAM：2048 GB

# Current Research Method (Target for Experiment Design)
{
    "Open Problems": "1. (Scope) Closed–form proximal updates in ProxTTA are limited to frozen Σ taken from the source domain. In practice, the Hessian/Fisher of the test distribution may drift, making the pre-conditioner sub-optimal or even harmful when the shift is large or non-stationary.\n2. (Expressiveness) Restricting adaptation to BN affine parameters fails when the source model uses other normalisers (LN, GN, RMSNorm) or when shifts mainly affect early convolutional filters or input statistics.\n3. (Safety) Even per-parameter trust-region steps can overshoot on extremely hard samples; a cheap on-line certificate of improvement is missing.\n4. (Latency) Skipping whole batches when the time budget is tight wastes potentially useful statistics; we need finer control that degrades gracefully instead of all-or-nothing.",
    "Methods": "We propose AdaNPC – Adaptive Natural-gradient & Probabilistically-Certified Test-time Adaptation.\n\nKey pieces:\nA. Streaming Fisher approximation  Σ̂_t  \na) maintain an exponential moving average of squared gradients g_t ⊙ g_t.  Σ̂_t = β Σ̂_{t-1}+(1-β)(g_t^2+ϵ) (diagonal)  (β=0.99).\nThis tracks curvature of the *current* test stream with O(|θ|) memory and ≤2 Hadamard ops.\n\nB. One-shot natural update  θ_{t+1}=θ_t−η Σ̂_t^{-1/2} g_t  with fixed η=1.  Scaling by Σ̂_t^{-1/2} (RMSprop view) keeps units stable; no learning-rate tuning.\n\nC. Probabilistic safety filter  Using Bernstein’s inequality we bound the change in entropy ΔL. We accept the update only if P(ΔL>0)≤δ (δ=0.1). Cost: one inner-product and pre-computed variance proxy.\n\nD. Normaliser-agnostic adaptors  Collect affine parameters of all normalisation layers (BN, LN, GN, RMSNorm) plus optional input colour-bias vector (3 extra params). Same code path, still O(|θ|).\n\nE. Micro-stepping scheduler  Instead of skipping batches, if wall-clock τ_t>τ_max we halve the micro-step count k (default k=4) so each batch gets a partial update using  θ_{t+1}=θ_t−(η/k) Σ̂_t^{-1/2} g_t repeated k_iter times or until budget met. Guarantees monotone accuracy-vs-time trade-off.\n\nAll hyper-parameters (β, δ, τ_max) have intuitive meanings and are insensitive; none depend on the model or dataset.",
    "Experimental Setup": "Code base: extend official Tent repo.\n\nModels & datasets: • ResNet-50-BN on ImageNet-C. • ViT-B/16-LN on ImageNet-C. • ResNet-18-GN on CIFAR-10-C. Streams: Realistic protocol with η∈{1,1/2,1/4}. Recurring PTTA Dirichlet δ=0.1.\n\nBaselines: Source, Tent, ProxTTA, EATA, RoTTA, CoTTA, Shrink-Tent.\n\nMetrics: 1) Online top-1 error under time penalty. 2) Time-to-90%-of-Tent accuracy. 3) Ratio of safe-filter rejections (<5% desired). 4) Extra memory (should <0.3 MB for R-50).",
    "Experimental Code": "class AdaNPC(Tent):\n    def __init__(self, model, beta=0.99, delta=0.1, tau_max=None):\n        super().__init__(model, torch.optim.SGD([],lr=1))\n        self.var = None            # Σ̂_t diagonal\n        self.beta=beta; self.delta=delta\n        self.tau_max=tau_max; self.k=4  # micro-steps\n        self.timer_ema=None\n    @torch.enable_grad()\n    def forward_and_adapt(self,x,model,opt):\n        t0=time.time()\n        y=model(x); loss=softmax_entropy(y).mean()\n        g=torch.autograd.grad(loss,self.params,create_graph=False)[0]\n        if self.var is None: self.var=g.pow(2)\n        else: self.var=self.beta*self.var+(1-self.beta)*g.pow(2)+1e-8\n        step=(g/self.var.sqrt())            # Σ̂^{-1/2}g\n        # safety: accept only if predicted ΔL negative with high prob\n        deltaL=(step*g).sum()              # first-order change\n        varL=((step.pow(2)*self.var).sum()).sqrt()\n        safe=(deltaL+varL*math.sqrt(2*math.log(1/self.delta)))<0\n        if safe:\n            k=max(1,self.k)\n            eta=1.0/k\n            for _ in range(k):\n                for p,s in zip(self.params,step): p-=eta*s\n        self.timer_ema=0.8*(self.timer_ema or 0)+0.2*(time.time()-t0)\n        if self.tau_max and self.timer_ema>self.tau_max and self.k>1:\n            self.k//=2     # micro-step back-off\n        model.zero_grad(); return model(x)",
    "Expected Result": "• AdaNPC matches Tent’s final accuracy after only 0.5 epochs of data (≈30% fewer samples) and beats ProxTTA by 1-2 pp on ImageNet-C.\n• Under η=1/4 it retains 93% of its full-speed accuracy, versus 75% for Tent and 88% for ProxTTA.\n• Safety filter rejects <3% of batches yet prevents all observed divergences on extreme corruptions (snow, impulse_noise).\n• Overhead: +|θ| vector and var buffer (0.25 MB for R-50), <5% extra FLOPs.",
    "Expected Conclusion": "AdaNPC turns TTA into a fast, normaliser-agnostic, and self-certified one-step natural-gradient procedure. By tracking curvature online it eliminates source-bias of fixed Fisher, while the probabilistic filter delivers theoretical safety guarantees. Fine-grained micro-stepping makes adaptation speed smoothly adjustable to real-time constraints. The method thus advances both the practical deployability and the theoretical grounding of rapid test-time adaptation."
}

# Experiment Strategy
Overall Goal:
Demonstrate that AdaNPC delivers (1) higher on-line performance, (2) better computational efficiency, (3) stronger robustness/safety and (4) wider architectural generalization than existing Test-Time Adaptation (TTA) techniques.

1. Validation Axes
   a. Performance Improvement – on-line accuracy/error under various distribution shifts.
   b. Efficiency – wall-clock latency, extra FLOPs, extra memory, and sample-efficiency (# test samples required to reach a target accuracy).
   c. Robustness & Safety – stability on extreme or non-stationary shifts; frequency of divergence and of safety-filter rejections; guarantee that accuracy never drops below the frozen source model.
   d. Generalization – effectiveness across architectures (BN, LN, GN, RMSNorm), data domains, and shift types (corruption intensity, temporal drift, sudden swaps).
   e. Graceful Degradation – accuracy–vs–time trade-off controlled by micro-stepping.

2. Required Comparisons
   • Strong baselines: Source (no TTA), Tent, ProxTTA, EATA, CoTTA, RoTTA, Shrink-Tent, and any contemporaneous state-of-the-art published before the submission deadline.
   • Internal ablations: (i) remove streaming Fisher (fall back to fixed Σ), (ii) remove probabilistic safety filter, (iii) remove micro-stepping, (iv) adapt BN only, (v) replace natural gradient with SGD; (vi) combine two removals to test interaction effects.
   • Sensitivity studies: vary β, δ, micro-step budget, and η to show hyper-parameter robustness.

3. Experimental Angles / Evidence Modalities
   A. Quantitative
      • Main metric: on-line top-1 error averaged over the whole stream.
      • Secondary: (i) area under the adaptation curve (AUC), (ii) time-to-X%-of-Tent accuracy, (iii) catastrophic failure rate (runs where error > source), (iv) % batches rejected by safety filter, (v) compute & memory overhead, (vi) energy proxy via NVIDIA-SMI.
      • Statistical treatment: 3 independent runs × 3 random seeds; report mean ± 95% CI; paired t-tests against best baseline.
   B. Qualitative / Diagnostic
      • Fisher drift plots (cosine similarity between Σ̂_t and source Σ_0).
      • Histograms of predicted ΔL vs empirical ΔL, highlighting safety bound tightness.
      • Accuracy–vs–latency curves when throttling τ_max.
      • Heat-map of component ablations across corruption severity.

4. Multi-Perspective Demonstration Plan
   • Orthogonal matrix: {Architectures} × {Datasets} × {Shift protocols}. Each cell runs the full comparison suite to show broad applicability.
   • Stress tests: (i) worst-case corruptions, (ii) synthetic non-stationary drift generated on-the-fly, (iii) adversarially sorted hard batches.
   • Real-time constraint scenario: enforce τ_max values (full, ½, ¼ of GPU budget) to showcase graceful degradation.
   • Safety spotlight: run 10×-long streams; count divergences; compare cumulative worst-case error to baselines.

5. Success Criteria (must hold on ≥80% of cells)
   • Accuracy: AdaNPC improves mean AUC by ≥2 pp over the best competing method with p<0.05.
   • Efficiency: <5% extra FLOPs, <0.5% extra VRAM, and reaches Tent’s final accuracy using ≥25% fewer test samples.
   • Robustness: zero catastrophic failures; safety filter rejection rate ≤5%.
   • Generalization: retains ≥90% of its ImageNet-C gain when ported to each other architecture/dataset without tuning.
   • Graceful degradation: under the strictest τ_max, retains ≥90% of its own full-speed accuracy while Tent drops below 80%.

6. Practical Considerations
   • All experiments run on one NVIDIA A100 (80 GB) node; resource accounting recorded via NVTX markers and pytorch profiler.
   • Unified codebase: start from official Tent repo, add modular hooks so baselines and AdaNPC share identical data loading, augmentation, synchronisation and precision settings.
   • Hyper-parameter policy: AdaNPC fixed defaults; baselines get per-dataset grid search as reported in their papers to avoid under-tuning claims.
   • Reproducibility: release seeds, config files, and slurm scripts; adherence to ML-Reproducibility Checklist.

This strategy provides a consistent, multi-faceted evaluation framework that will be reused verbatim in all subsequent experiments, ensuring that every study collectively builds a compelling, well-substantiated case for the effectiveness of AdaNPC.

---


# Reference Information from Previous Iteration

Output:
{
    "experiments": [
        {
            "experiment_id": "exp-1-main-performance",
            "run_variations": [
                "source",
                "Tent",
                "ProxTTA",
                "EATA",
                "AdaNPC-full"
            ],
            "description": "Objective / Hypothesis:\nDemonstrate that AdaNPC consistently surpasses the strongest prior TTA methods in on-line accuracy while staying within a 5 % compute overhead budget across architectures that rely on BN, LN and GN.\n\nModels:\n• ResNet-50 (BN) pre-trained on ImageNet-1K.\n• ViT-B/16 (LN) pre-trained with supervised ImageNet-1K.\n• ResNet-18 (GN) pre-trained on CIFAR-10.\n\nDatasets & Shifts:\n• ImageNet-C (15 corruption types × 5 severities).\n• CIFAR-10-C (same corruption taxonomy).\n\nPre-processing:\n• ImageNet: resize ⇢ 256, center-crop 224×224, per-channel mean / std.\n• CIFAR-10: 32×32, per-channel mean / std.\nNo additional augmentation during test streams.\n\nData Splitting & Streaming Protocol:\nWhole corrupted test set is consumed once, sequentially, as an on-line stream (≈50 k samples for ImageNet-C, 10 k for CIFAR-10-C). 3 independent random orders per seed (3 seeds → 9 runs / model).\n\nEvaluation Metrics:\nPrimary – on-line top-1 error (lower=better).\nSecondary – AUC of error curve, time-to-90 %-of-Tent accuracy, extra FLOPs (%), extra VRAM (%), sample-efficiency (# samples to reach Tent’s final accuracy).\n\nRepetitions & Statistics:\n3 seeds × 3 shuffles. Report mean ± 95 % CI, paired t-test w.r.t. best competing baseline.\n\nComparisons:\nrun_variations list; baselines use authors’ recommended hyper-parameters. AdaNPC uses fixed defaults (β = 0.99, δ = 0.1, k = 4).\n\nHyper-parameter analysis (within this experiment):\nA small sweep on η ∈{1,½,¼} for AdaNPC to confirm insensitivity; reported in appendix.\n\nRobustness checks:\nCorruption-specific break-down tables; catastrophic failure count (error > source).\n\nCompute Efficiency:\nPyTorch profiler + NVTX. Measured: forward + adaptation FLOPs, wall-clock per sample, peak GPU-mem.\n\nExample Code Snippet:\n```python\nfrom adapttta import load_model, StreamLoader, evaluate\nmodel = load_model('resnet50_bn_imagenet')\nstream = StreamLoader('imagenet_c', batch=64, shuffle=True, seed=seed)\nengine = AdaNPC(model) if variant=='AdaNPC-full' else load_baseline(variant)\nerror_curve, flops, mem = evaluate(engine, stream)\n```"
        },
        {
            "experiment_id": "exp-2-ablation-sensitivity",
            "run_variations": [
                "AdaNPC-full",
                "fixed-Fisher",
                "no-safety-filter",
                "no-micro-stepping",
                "SGD-adapter"
            ],
            "description": "Objective / Hypothesis:\nIdentify which algorithmic components of AdaNPC contribute most to performance, safety and efficiency, and verify that the method is stable over a wide hyper-parameter range.\n\nModel / Dataset:\n• ResNet-50 (BN) on ImageNet-C (severity 3 default stream).\nAblations are applied only to AdaNPC to keep comparison focused.\n\nComponent Definitions:\n• fixed-Fisher – replace online Σ̂_t by frozen source Σ.\n• no-safety-filter – skip Bernstein test, always step.\n• no-micro-stepping – k=1, disables adaptive τ.\n• SGD-adapter – use plain SGD (same η) instead of natural gradient.\n\nHyper-parameter Grids:\n• β ∈ {0.9,0.95,0.99,0.999}\n• δ ∈ {0.01,0.1,0.3}\n• k_init ∈ {1,2,4,8}\nA Latin-hyper-cube sample of 20 combos is evaluated for AdaNPC-full to produce sensitivity heat-maps.\n\nData Splitting & Seeds:\n1 fixed corruption order × 3 random seeds.\n\nEvaluation Metrics:\nPrimary – AUC; Secondary – # rejections, worst-case error spike (max over stream), FLOPs/sample.\nSelection criterion for plotting – last checkpoint (no early stop).\n\nRobustness Analyses:\n• Noise-injection: Add 5 % i.i.d. impulse noise to every incoming batch online.\n• OOD Fisher Drift: Interleave severity levels 1→5 every 200 batches.\n\nDiagnostics Collected:\n• Cosine similarity between Σ̂_t and Σ_0.\n• Histogram of predicted vs empirical ΔL.\n\nExample Code Snippet:\n```bash\npython run_ablation.py \\\n  --variant $VAR \\\n  --beta $BETA --delta $DELTA --k_init $K \\\n  --seed $SEED > logs/$VAR_$BETA_$DELTA_$K_$SEED.txt\n```"
        },
        {
            "experiment_id": "exp-3-robustness-latency",
            "run_variations": [
                "AdaNPC-τ1.0",
                "AdaNPC-τ0.5",
                "AdaNPC-τ0.25",
                "Tent-τ0.25",
                "source"
            ],
            "description": "Objective / Hypothesis:\nEvaluate AdaNPC’s graceful degradation under tight real-time budgets and its robustness to severe non-stationary shifts compared to Tent and a frozen model.\n\nModel & Dataset:\n• ViT-B/16 (LN) evaluated on a Non-Stationary-ImageNet-C stream generated as follows:\n  – Every 100 images swap corruption type; every 300 images increase or decrease severity randomly; length = 60 k samples (>10× standard test set).\n\nReal-time Budget Settings:\n• τ_max ∈ {∞ (τ1.0), ½ GPU budget, ¼ GPU budget}. Measured from clean-source forward pass median time.\n\nData Pre-processing – identical to exp-1.\n\nSeeds & Repeats – 3 seeds.\n\nEvaluation Metrics:\nPrimary – cumulative online error under wall-clock constraint.\nSecondary – retention ratio (accuracy_τ / accuracy_∞), # safety rejections, worst 100-sample window error, GPU utilisation (%), energy proxy (J). All metrics logged per 1 k-sample window.\n\nRobustness Tests:\n• Adversarially sorted hard-first stream (worst-case ordering).\n• After 30 k samples inject 10 % label noise to test safety filter’s divergence prevention.\n\nCompute Accounting:\nNsight Systems traces; FLOPs via ptflops; memory via torch.cuda.max_memory_allocated().\n\nExample Code Snippet:\n```python\nfor tau in [None, 0.5, 0.25]:\n    engine = AdaNPC(model, tau_max=tau) if tau else AdaNPC(model)\n    err, wall, util = run_stream(engine, stream, realtime=True)\n    log_results(tau, err, wall, util)\n```"
        }
    ],
    "expected_models": [
        "ResNet-50",
        "ViT-B/16",
        "ResNet-18"
    ],
    "expected_datasets": [
        "ImageNet-C",
        "CIFAR-10-C"
    ]
}
